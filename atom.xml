<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫少侠Code笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-09T13:35:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>莫少侠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二章 IPC机制</title>
    <link href="http://yoursite.com/2018/05/09/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20IPC%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/05/09/第二章 IPC机制/</id>
    <published>2018-05-09T11:32:20.000Z</published>
    <updated>2018-05-09T13:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-2-1-开启多进程"><a href="#2-2-1-开启多进程" class="headerlink" title="2.2.1 开启多进程"></a>2.2.1 开启多进程</h4><ul><li>进程名以”:”开头的进程属于应用私有进程，其它应用不能和它跑在同一个进程，而进程名不以“:”开头的进程属于全局进程，其它应用通过ShareUID方式可以和它跑在同一进程中。（p39）<h4 id="2-2-2-多进程模式的运行机制"><a href="#2-2-2-多进程模式的运行机制" class="headerlink" title="2.2.2 多进程模式的运行机制"></a>2.2.2 多进程模式的运行机制</h4></li><li>Android为每一个进程都分配了一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就导致在不同的虚拟机中访问同一个类的对象会有不同的副本。（p40）</li><li>使用多进程会造成如下几方面的问题：</li></ul><ul><li>静态成员和单例模式完全失效</li><li>线程同步机制完全失效</li><li>SharedPreference的可靠性下降</li><li>Application会多次创建<h3 id="2-3-IPC基础概念"><a href="#2-3-IPC基础概念" class="headerlink" title="2.3 IPC基础概念"></a>2.3 IPC基础概念</h3><h4 id="2-3-1-Serializable-接口"><a href="#2-3-1-Serializable-接口" class="headerlink" title="2.3.1 Serializable 接口"></a>2.3.1 Serializable 接口</h4></li></ul><ul><li>需要指定serialVersionUID之后才能反序列化</li><li>静态成员属于类不属于对象，所以不会参与序列化过程；用transient关键字标记的成员变量不参与序列化过程(p44)<h4 id="2-3-2-Parcelable接口"><a href="#2-3-2-Parcelable接口" class="headerlink" title="2.3.2 Parcelable接口"></a>2.3.2 Parcelable接口</h4></li><li>Parcelable是Android的序列化方式，使用略麻烦，但是效率很高</li><li>Serializable是Java中的序列化接口，使用简单，但开销大，序列化和反序列化过程中都需要大量的I/O操作。</li><li>使用时建议：</li></ul><ul><li>内存序列化中使用Parcelable</li><li>序列化到存储设备或者将对象序列化后通过网络传输使用Serializable(P47)<h4 id="2-3-3-Binder"><a href="#2-3-3-Binder" class="headerlink" title="2.3.3 Binder"></a>2.3.3 Binder</h4></li></ul><ul><li>Binder是Android中的一个类，实现了IBinder接口，是Android中的一种跨进程通信方式，Linux中没有。</li><li>Binder主要用在Service中，包括AIDL和Messager。(P47)<h3 id="2-4-Android中的IPC方式"><a href="#2-4-Android中的IPC方式" class="headerlink" title="2.4 Android中的IPC方式"></a>2.4 Android中的IPC方式</h3><h4 id="2-4-1-使用Bundle"><a href="#2-4-1-使用Bundle" class="headerlink" title="2.4.1 使用Bundle"></a>2.4.1 使用Bundle</h4>通常情况下用Intent传递Bundle。特殊场景还可以这样用：A进程用intent启动B进程的Service组件(如IntentService)，让Service在后台进行计算，计算完毕后再启动B进程中真正要启动的目标组件。<h4 id="2-4-2-使用文件共享"><a href="#2-4-2-使用文件共享" class="headerlink" title="2.4.2 使用文件共享"></a>2.4.2 使用文件共享</h4>通过序列化和反序列化的方式，但是要注意处理并发读/写问题，适合于对数据同步要求不高的进程间通信。<h4 id="2-4-3-使用Messenger（串行处理）"><a href="#2-4-3-使用Messenger（串行处理）" class="headerlink" title="2.4.3 使用Messenger（串行处理）"></a>2.4.3 使用Messenger（串行处理）</h4>Messager是对AIDL作了封装，底层实现是binder<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(Handler target)</span> </span>&#123;</span><br><span class="line">mTarget = target.getIMessenger();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</span><br><span class="line">mTarget = IMessenger.Stub.asInterface(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="1、服务端进程"><a href="#1、服务端进程" class="headerlink" title="1、服务端进程"></a>1、服务端进程</h5><p>首先，需要在服务端创建一个Service来处理客户端的连接请求，同时创建一个Handler并通过它来创建一个Message对象，然后在Service的onBind中返回这个Messager对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MessengerService"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line"><span class="keyword">case</span> MyConstants.MSG_FROM_CLIENT:</span><br><span class="line">Log.i(TAG, <span class="string">"receive msg from Client:"</span> + msg.getData().getString(<span class="string">"msg"</span>));</span><br><span class="line">Messenger client = msg.replyTo;</span><br><span class="line">Message relpyMessage = Message.obtain(<span class="keyword">null</span>, MyConstants.MSG_FROM_SERVICE);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(<span class="string">"reply"</span>, <span class="string">"嗯，你的消息我已经收到，稍后会回复你。"</span>);</span><br><span class="line">relpyMessage.setData(bundle);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.send(relpyMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mMessenger.getBinder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、客户端进程"><a href="#2、客户端进程" class="headerlink" title="2、客户端进程"></a>2、客户端进程</h5><p>客户端进程中，首先要绑定服务端的Service，绑定成功后用服务端返回的IBinder对象创建一个Messenger，通过这个Messager就可以向服务端发送消息了，发消息类型为Message对象。如果需要服务端能够回应客户端，就和服务端一样，我们还需要创建一个Handler并创建一个新的Messager，并把这个Messager对象通过Message的replyTo参数传递给服务端，服务端通过这个replyTo参数就可以回应客户端。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class MessengerActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">private static final String TAG = &quot;MessengerActivity&quot;;</span><br><span class="line"></span><br><span class="line">private Messenger mService;</span><br><span class="line">private Messenger mGetReplyMessenger = new Messenger(new MessengerHandler());</span><br><span class="line"></span><br><span class="line">private static class MessengerHandler extends Handler &#123;</span><br><span class="line">@Override</span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">switch (msg.what) &#123;</span><br><span class="line">case MyConstants.MSG_FROM_SERVICE:</span><br><span class="line">Log.i(TAG, &quot;receive msg from Service:&quot; + msg.getData().getString(&quot;reply&quot;));</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">super.handleMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private ServiceConnection mConnection = new ServiceConnection() &#123;</span><br><span class="line">public void onServiceConnected(ComponentName className, IBinder service) &#123;</span><br><span class="line">mService = new Messenger(service);</span><br><span class="line">Log.d(TAG, &quot;bind service&quot;);</span><br><span class="line">Message msg = Message.obtain(null, MyConstants.MSG_FROM_CLIENT);</span><br><span class="line">Bundle data = new Bundle();</span><br><span class="line">data.putString(&quot;msg&quot;, &quot;hello, this is client.&quot;);</span><br><span class="line">msg.setData(data);</span><br><span class="line">msg.replyTo = mGetReplyMessenger;</span><br><span class="line">try &#123;</span><br><span class="line">mService.send(msg);</span><br><span class="line">&#125; catch (RemoteException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void onServiceDisconnected(ComponentName className) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_messenger);</span><br><span class="line">Intent intent = new Intent(&quot;com.ryg.MessengerService.launch&quot;);</span><br><span class="line">bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onDestroy() &#123;</span><br><span class="line">unbindService(mConnection);</span><br><span class="line">super.onDestroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-4-4-使用AIDL-可以并发，难点P71-91"><a href="#2-4-4-使用AIDL-可以并发，难点P71-91" class="headerlink" title="2.4.4 使用AIDL(可以并发，难点P71-91)"></a>2.4.4 使用AIDL(可以并发，难点P71-91)</h4><h4 id="2-4-5-使用ContentProvider-P91-103"><a href="#2-4-5-使用ContentProvider-P91-103" class="headerlink" title="2.4.5 使用ContentProvider(P91-103)"></a>2.4.5 使用ContentProvider(P91-103)</h4><p>是Android中提供的专门用于不同应用间进行数据共享的方式。<br>底层实现也是Binder。</p><h4 id="2-4-6-使用Socket"><a href="#2-4-6-使用Socket" class="headerlink" title="2.4.6 使用Socket"></a>2.4.6 使用Socket</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2-2-1-开启多进程&quot;&gt;&lt;a href=&quot;#2-2-1-开启多进程&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 开启多进程&quot;&gt;&lt;/a&gt;2.2.1 开启多进程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进程名以”:”开头的进程属于应用私有进程，其它应用不能和
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://yoursite.com/2018/01/31/hello-world/"/>
    <id>http://yoursite.com/2018/01/31/hello-world/</id>
    <published>2018-01-31T13:05:56.000Z</published>
    <updated>2018-05-09T11:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
